from Graph import Graph
import unittest


test_graph = "1 9\n\
2 2\n\
3 3 2\n\
4 5 1\n\
5 2 1 4\n\
6 2 5\n\
7 2 4\n\
8 4 4 5\n\
9 5 4\n\
10 1 2 3\n\
11 2 1 5 6 7 8 9"

g = Graph(path = test_graph, string_override=True)

class GraphTest(unittest.TestCase):
    
    def test_table(self):
        t = g.table
        self.assertIsInstance(t, dict)
        self.assertEqual(t, {
            0 : {1 : 0, 2 : 0},
            1 : {4 : 9, 5 : 9, 11 : 9},
            2 : {3 : 2, 10 : 2},
            3 : {10 : 3},
            4 : {5 : 5, 7 : 5, 8 : 5, 9 : 5},
            5 : {6 : 2, 8: 2, 11: 2},
            6 : {11 : 2},
            7 : {11 : 2},
            8 : {11 : 4},
            9 : {11 : 5},
            10 : {12 : 1},
            11 : {12 : 2},
            12 : {}
        })
        
    def test_negative_arcs(self):
        t = g.has_negative_arcs()
        self.assertIsInstance(t, bool)
        self.assertEqual(t, False)
        
    def test_matrix(self):
        t = g.get_matrix()
        self.assertIsInstance(t, list)
        self.assertEqual(t, 
        [
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])
        
    def test_value_matrix(self):
        t = g.get_value_matrix()
        self.assertIsInstance(t, list)
        self.assertEqual(t, 
        [
            ['', 0, 0, '', '', '', '', '', '', '', '', '', ''],
            ['', '', '', '', 9, 9, '', '', '', '', '', 9, ''],
            ['', '', '', 2, '', '', '', '', '', '', 2, '', ''],
            ['', '', '', '', '', '', '', '', '', '', 3, '', ''],
            ['', '', '', '', '', 5, '', 5, 5, 5, '', '', ''],
            ['', '', '', '', '', '', 2, '', 2, '', '', 2, ''],
            ['', '', '', '', '', '', '', '', '', '', '', 2, ''],
            ['', '', '', '', '', '', '', '', '', '', '', 2, ''],
            ['', '', '', '', '', '', '', '', '', '', '', 4, ''],
            ['', '', '', '', '', '', '', '', '', '', '', 5, ''],
            ['', '', '', '', '', '', '', '', '', '', '', '', 1],
            ['', '', '', '', '', '', '', '', '', '', '', '', 2],
            ['', '', '', '', '', '', '', '', '', '', '', '', ''],
        ])
        
unittest.main()

